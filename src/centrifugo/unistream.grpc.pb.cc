// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: unistream.proto

#include "unistream.pb.h"
#include "unistream.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace centrifugal {
namespace centrifugo {
namespace unistream {

static const char* CentrifugoUniStream_method_names[] = {
  "/centrifugal.centrifugo.unistream.CentrifugoUniStream/Consume",
};

std::unique_ptr< CentrifugoUniStream::Stub> CentrifugoUniStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CentrifugoUniStream::Stub> stub(new CentrifugoUniStream::Stub(channel, options));
  return stub;
}

CentrifugoUniStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Consume_(CentrifugoUniStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::centrifugal::centrifugo::unistream::Push>* CentrifugoUniStream::Stub::ConsumeRaw(::grpc::ClientContext* context, const ::centrifugal::centrifugo::unistream::ConnectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::centrifugal::centrifugo::unistream::Push>::Create(channel_.get(), rpcmethod_Consume_, context, request);
}

void CentrifugoUniStream::Stub::async::Consume(::grpc::ClientContext* context, const ::centrifugal::centrifugo::unistream::ConnectRequest* request, ::grpc::ClientReadReactor< ::centrifugal::centrifugo::unistream::Push>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::centrifugal::centrifugo::unistream::Push>::Create(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::centrifugal::centrifugo::unistream::Push>* CentrifugoUniStream::Stub::AsyncConsumeRaw(::grpc::ClientContext* context, const ::centrifugal::centrifugo::unistream::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::centrifugal::centrifugo::unistream::Push>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::centrifugal::centrifugo::unistream::Push>* CentrifugoUniStream::Stub::PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::centrifugal::centrifugo::unistream::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::centrifugal::centrifugo::unistream::Push>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, false, nullptr);
}

CentrifugoUniStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentrifugoUniStream_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CentrifugoUniStream::Service, ::centrifugal::centrifugo::unistream::ConnectRequest, ::centrifugal::centrifugo::unistream::Push>(
          [](CentrifugoUniStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::centrifugal::centrifugo::unistream::ConnectRequest* req,
             ::grpc::ServerWriter<::centrifugal::centrifugo::unistream::Push>* writer) {
               return service->Consume(ctx, req, writer);
             }, this)));
}

CentrifugoUniStream::Service::~Service() {
}

::grpc::Status CentrifugoUniStream::Service::Consume(::grpc::ServerContext* context, const ::centrifugal::centrifugo::unistream::ConnectRequest* request, ::grpc::ServerWriter< ::centrifugal::centrifugo::unistream::Push>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace centrifugal
}  // namespace centrifugo
}  // namespace unistream

